###########################################################################
# ██████╗░██╗███████╗███╗░░██╗██╗░░░██╗███████╗███╗░░██╗██╗░░░██╗███████╗ #
# ██╔══██╗██║██╔════╝████╗░██║██║░░░██║██╔════╝████╗░██║██║░░░██║██╔════╝ #
# ██████╦╝██║█████╗░░██╔██╗██║╚██╗░██╔╝█████╗░░██╔██╗██║██║░░░██║█████╗░░ #
# ██╔══██╗██║██╔══╝░░██║╚████║░╚████╔╝░██╔══╝░░██║╚████║██║░░░██║██╔══╝░░ #
# ██████╦╝██║███████╗██║░╚███║░░╚██╔╝░░███████╗██║░╚███║╚██████╔╝███████╗ #
# ╚═════╝░╚═╝╚══════╝╚═╝░░╚══╝░░░╚═╝░░░╚══════╝╚═╝░░╚══╝░╚═════╝░╚══════╝ # src : https://fsymbols.com/generators/wide/
########################################################################### ur book manager from 1991


######### MODULES / IMPORT #############

from manage_system.manage_files import *
from manage_system.manage_bookreaders import *
from manage_system.manage_readers import *
from manage_system.manage_book import *
from suggestions.manage_review import *
from suggestions.manage_suggest import *

######### MODULES / IMPORT #############

######### SETTINGS #############

from config import language
if language == "fr":
	from languages.language_fr import *
elif language == "en":
	from languages.language_en import *

######### SETTINGS #############

######### FONCTIONS #############

def welcome():
	"""
	Welcome message with the "sign" of Book Manager
	Sign generated by : https://fsymbols.com/generators/wide/
	".from 1991" ref to the date of creation of python
	"""
	print("#####################################################################################################")
	print("# ██████╗░░█████╗░░█████╗░██╗░░██╗░░░░███╗░░░███╗░█████╗░███╗░░██╗░█████╗░░██████╗░███████╗██████╗░ #")
	print("# ██╔══██╗██╔══██╗██╔══██╗██║░██╔╝░░░░████╗░████║██╔══██╗████╗░██║██╔══██╗██╔════╝░██╔════╝██╔══██╗ #")
	print("# ██████╦╝██║░░██║██║░░██║█████═╝░░░░░██╔████╔██║███████║██╔██╗██║███████║██║░░██╗░█████╗░░██████╔╝ #")
	print("# ██╔══██╗██║░░██║██║░░██║██╔═██╗░░░░░██║╚██╔╝██║██╔══██║██║╚████║██╔══██║██║░░╚██╗██╔══╝░░██╔══██╗ #")
	print("# ██████╦╝╚█████╔╝╚█████╔╝██║░╚██╗░░░░██║░╚═╝░██║██║░░██║██║░╚███║██║░░██║╚██████╔╝███████╗██║░░██║ #")
	print("# ╚═════╝░░╚════╝░░╚════╝░╚═╝░░╚═╝░░░░╚═╝░░░░░╚═╝╚═╝░░╚═╝╚═╝░░╚══╝╚═╝░░╚═╝░╚═════╝░╚══════╝╚═╝░░╚═╝ #")
	print("#########" + text_bookmanager_language + language + "##################################################################" + text_bookmanager_from + " 1991#####")


def command_center(command=0):
	"""
	+-------------------+
	|---- Main Menu ----|
	+-------------------+

	1. Manage Users
	2. Manage Books
	3. Manage Books Readers
	4. Exit program
	"""
	commandes = {1: "Manage Users", 2: "Manage Books", 3: "Manage Books Readers", 4: "Exit Program", 5: "Settings"}
	print(text_command_center)

	while command != 4:
		try:
			command = int(input(text_command_center_input))
		except ValueError:
			command = 0
		# Commands to implant

		if command not in commandes:
			command = 0  # Does nothing, just relaunch the command_center()

		elif command == 1:
			if command_manage_reader():
				command = 0
				print(text_command_center)

		elif command == 2:
			if command_manage_book():
				command = 0
				print(text_command_center)

		elif command == 3:
			if command_manage_bookreaders():
				command = 0
				print(text_command_center)

		elif command == 4:
			print(text_command_center_exit)

		elif command == 5:
			if command_settings():
				command = 0
				print(text_command_center)

	return True


def command_settings(command=0):
	"""
	1. Language
	2. Factory Reset (*secret implement*)
	3. Back to main menu
	"""
	return True


def command_manage_reader(command=0):
	"""
	1. Add User
	2. Show User list
	3. Delete User
	4. Modify User
	5. Show your profil
	6. Back to main menu
	"""

	commandes = {1: "Add user", 2: "Modify your profile", 3: "Remove user", 4: "Show your profile", 5: "Show user list", 6: "Back to main menu"}

	print(text_command_manage_reader)

	while command != 6:
		try:
			command = int(input(text_command_manage_reader_input))
		except ValueError:
			command = 0
		# Commands to implant

		if command not in commandes:
			command = 0  # Does nothing, just relaunch the command_center()

		elif command == 1:
			if add_user():
				command = 0
				print(text_command_manage_reader_exiting_1)
				print(text_command_manage_reader)

		elif command == 2:
			if modify_user():
				command = 0
				print(text_command_manage_reader_exiting_2)
				print(text_command_manage_reader)

		elif command == 3:
			if remove_user() is False:
				print(text_command_manage_reader_exiting_3)
				print(text_command_manage_reader)

		elif command == 4:
			if show_user():
				command = 0
				print(text_command_manage_reader)

		elif command == 5:
			if show_users():
				command = 0
				print("")
				print(text_command_manage_reader)
				print("")

		elif command == 6:
			print(text_command_manage_reader_exit)

	return True


def command_manage_book(command=0):
	"""
	1. Add book
	2. Delete book
	3. Rename book
	4. Lists books
	5. Back to main menu
	"""

	commandes = {1: "Add Book", 2: "Rename book", 3: "Delete book", 4: "List books", 5: "Back to main menu"}
	print(text_command_manage_book)

	while command != 5:
		try:
			command = int(input(text_command_manage_book_input))
		except ValueError:
			command = 0
		# Commands to implant

		if command not in commandes:
			command = 0  # Does nothing, just relaunch the command
		elif command == 1:
			if add_book():
				command = 0
				print(text_command_manage_book_exiting_1)
				print(text_command_manage_book)

		elif command == 2:
			if modify_book():
				command = 0
				print(text_command_manage_book_exiting_2)
				print(text_command_manage_book)

		elif command == 3:
			if delete_book():
				command = 0
				print(text_command_manage_book_exiting_3)
				print(text_command_manage_book)

		elif command == 4:
			if show_books():
				command = 0
				print(text_command_manage_reader_exiting_4)
				print(text_command_manage_book)
			else:
				command = 0
				print(text_command_manage_book_exiting_4)
				print(text_command_manage_book)

		elif command == 5:
			print(text_command_manage_book_exit)

	return True


def command_manage_bookreaders(command=0):
	"""
	1. Add readed book
	2. Add note review
	3. Suggested book
	4. Back to main menu
	"""

	commandes = {1: "Add Readedbook", 2: "Add note review", 3: "Suggested book", 4: "Back to main menu"}
	print(text_command_manage_bookreaders)

	while command != 4:
		try:
			command = int(input(text_command_manage_bookreaders_input))
		except ValueError:
			command = 0
		# Commands to implant

		if command not in commandes:
			command = 0  # Does nothing, just relaunch the command

		elif command == 1:
			if add_bookreaded(logged_username):
				command = 0
				print(text_command_manage_bookreaders)

		elif command == 2:
			if review_book(logged_username, position(read_file("readers"), logged_username)):
				command = 0
				print(text_command_manage_bookreaders)

		elif command == 3:
			if suggest_book(user1=logged_username):
				command = 0
				print(text_command_manage_bookreaders)

		elif command == 4:
			print(text_command_manage_bookreaders_exit)

	return True


def login():
	"""
	Username: logged_username <- global var
	If new user : Type "new"
	If want to exit the login phase (close the program): Type "exit"
	"""
	global logged_username
	logged_username = ""

	print(text_login_phase)

	while True:
		while (user_exist(logged_username) is False) and (logged_username != text_login_phase_new):
			logged_username = str(input(text_login_phase_input))
			if logged_username in ["exit()", "Exit()", "exit", "Exit"]:
				quit()

		if logged_username == text_login_phase_new:
			add_user()
			logged_username = ""
			print(text_login_phase)
		else:
			print(text_login_phase_separator)
			return True


######### FONCTIONS #############
######### MAIN #############

if __name__ == '__main__':
	# Load calc similar matrix, welcome, login
	# calc_suggest_matrix(read_file("suggest_matrix"))
	welcome()

	if login():

		print("\n")
		print(text_welcome + " " + str(logged_username) + " ! " + text_welcome_librarian)
		print("\n")

		if command_center():
			print(text_exit_1 + " " + str(logged_username) + " ! " + text_exit_2)
	quit()
